buildscript {
    dependencies {
        classpath gradleTestKit()
    }
}

import org.gradle.testkit.runner.GradleRunner
import org.apache.tools.ant.filters.*

task runBuildInit {

    ext {
        buildType       = 'scala-library'
        destDir         = file("${buildDir}/init/${project.name}")
        outputLogFileDir = file("${buildDir}/init/output")
        tmpOutputDir     = file("${buildDir}/tmp/init/output")
        initOutputFile   = file("${outputLogFileDir}/init.txt")
        buildOutputFile  = file("${outputLogFileDir}/build.txt")
        docOutputFile    = file("${outputLogFileDir}/scaladoc.txt")
    }

    outputs.dir { destDir }
    outputs.file { initOutputFile }
    outputs.file { buildOutputFile }
    outputs.file { docOutputFile }

    inputs.property 'gradleVer' , gradle.gradleVersion

    doLast {
        File tmpDir = file("${buildDir}/tmp/init/${project.name}")
        File tmpInitFile  = new File(tmpOutputDir,initOutputFile.name)
        File tmpBuildFile = new File(tmpOutputDir,buildOutputFile.name)
        File tmpDocFile   = new File(tmpOutputDir,docOutputFile.name)

        destDir.deleteDir()
        tmpDir.deleteDir()
        mkdir destDir
        mkdir tmpDir
        mkdir initOutputFile.parentFile
        mkdir tmpBuildFile.parentFile

        tmpInitFile.withWriter { Writer output ->
            GradleRunner.create().forwardStdOutput(output).withProjectDir(tmpDir).
                withArguments('init','--type',buildType).build()
        }

        tmpBuildFile.withWriter { Writer output ->
            GradleRunner.create().forwardStdOutput(output).withProjectDir(tmpDir).
                withArguments('build').build()
        }

        File editLibrary = new File(tmpDir,'src/main/scala/Library.scala')
        editLibrary.text = file('contents/scaladoc-prefix.txt').text + editLibrary.text

        tmpDocFile.withWriter { Writer output ->
            GradleRunner.create().forwardStdOutput(output).withProjectDir(tmpDir).
                withArguments('scaladoc').build()
        }

        copy {
            from tmpDir
            into destDir

            exclude '.gradle/**'
            exclude 'build/**'

            filesMatching (['build.gradle','**/*.scala']) {
                filter { line ->
                    if (line =~ /^(\/\*)|(\s*\*)|(\/\/)/) {
                        null
                    } else {
                        line
                    }
                }
            }

            filesMatching (['settings.gradle']) {
                filter { line->
                    if(line=~/^rootProject/) {
                        "${line} // <1>"
                    } else {
                        null
                    }
                }
            }

            filesMatching (['build.gradle']) {
                filter { line ->
                    if (line=~/\s*jcenter/) {
                        "${line} // <1>"
                    } else if (line=~/\s*compile.+scala-library/) {
                        "${line} // <2>"
                    } else if (line=~/\s*testCompile.+scalatest/) {
                        "${line} // <4>"
                    } else if (line=~/\s*testCompile.+junit/) {
                        "${line} // <3>"
                    } else if (line=~/\s*testRuntime.+scala-xml/) {
                        "${line} // <5>"
                    } else {
                        line
                    }
                }
            }

            filesMatching( ['src/main/scala/Library.scala'] ) {
                filter ConcatFilter, prepend: file('contents/scaladoc-prefix.txt'),
                    append: file('contents/scaladoc-postfix.txt')
            }
        }

        copy {
            from tmpOutputDir
            into outputLogFileDir

            filter { line ->
                if( line=~ /^Download|Total time/) {
                    null
                } else if (line =~ /building-scala-libraries\/build\/resources\/main' does not exist/) {
                    null // This hides ugly output which we don't want the guide reader to see
                } else {
                    line
                }
            }
        }
    }
}
