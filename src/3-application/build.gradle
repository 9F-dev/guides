subprojects {
    afterEvaluate {
        repositories {
            jcenter()
        }

        // tag::compileJava[]
        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '-d', "$destinationDir/$moduleName"
                ]
                options.sourcepath = files(sourceSets.main.java.srcDirs)
                classpath = files()
            }
        }
        // end::compileJava[]

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'junit',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        // tag::jar[]
        jar {
            inputs.property("moduleName", moduleName)
            exclude moduleName
            with copySpec {
                from file("${sourceSets.main.java.outputDir}/$moduleName")
            }
        }
        // end::jar[]

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'ALL-MODULE-PATH',
                    '--add-reads', "$moduleName=junit",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}
