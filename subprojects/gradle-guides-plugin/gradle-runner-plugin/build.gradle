
plugins {
//	id 'com.gradle.build-scan' version '1.16'
    id 'groovy'
    id 'com.gradle.plugin-publish'// version '0.10.1'
    id 'com.github.hierynomus.license' version '0.13.1'
	id 'org.asciidoctor.convert' version '1.5.3'
	id "org.ajoberstar.git-publish" version '0.2.1'
	id 'org.ysb33r.cloudci' version '1.0'
	id 'org.ysb33r.gradletest' version '2.0-rc.4'
}

import org.asciidoctor.gradle.AsciidoctorTask

group = 'org.ysb33r.gradle'
version = '2.0'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext {
	websitePublishFolder = file("${buildDir}/website/public")
	notSnapshot = {!version.endsWith("SNAPSHOT") }
}

repositories {
	jcenter()
}

ext {
    depSpock = "org.spockframework:spock-core:1.3-groovy-${GroovySystem.version.replaceAll(/\.\d+$/,'')}"
}

dependencies {
	compile gradleApi()
	compile gradleTestKit()
	compile localGroovy()

	testCompile (depSpock) {
		exclude module : 'groovy-all'
	}
}

groovydoc {
    windowTitle 'GradleRunner Plugin for Gradle'
	destinationDir file("${buildDir}/docs/api")
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	description "An archive of the JavaDocs for Maven Central"
	classifier "javadoc"
	from groovydoc //Javadoc
}


artifacts {
	archives sourcesJar
	archives javadocJar
}

jar {
	manifest {
		attributes 'Implementation-Title': project.name, 'Implementation-Version': version
	}
}

test {
	systemProperties TESTROOT : "${buildDir}/tmp/testroot"
}

pluginBundle {
	description = 'A plugin that helps you runs multiple Gradle tasks as isolated sequential steps and collect the output'
	website     = 'https://ysb33rorg.gitlab.io/gradle-runner-plugin'
	vcsUrl      = 'https://gitlab.com/ysb33rOrg/gradle-runner-plugin.git'

	tags = ['testing','integrationTesting','documentation']

	plugins {
		gradleRunnerPlugin {
			id = 'org.ysb33r.gradlerunner'
			displayName = 'Run multiple steps including Gradle executions and collect the output. Very useful for crafting documentation.'
		}
	}
}

publishPlugins {
	onlyIf notSnapshot
    mustRunAfter check
}

license {
	header = rootProject.file('config/HEADER')
	strictCheck = true
	ignoreFailures = false
	ext.year = '2015 - 2017'
	excludes([
        '**/*.ad', '**/*.asciidoc', '**/*.adoc', '**/*.md','**/*.properties','**/*.groovy.template',
        '**/*.dsl.*Spec.groovy'
    ])
    mapping 'gradle', 'SLASHSTAR_STYLE'
}

//buildScan {
//	licenseAgreementUrl = 'https://gradle.com/terms-of-service'
//	licenseAgree = 'yes'
//}


if (JavaVersion.current().isJava8Compatible()) {
	tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	}
}

task validateDocVersions {
    group 'Documentation'
    description 'Validates if current version is listed in (not SNAPSHOTS)'
    onlyIf notSnapshot

    ext {
        versionsFile = file('src/docs/landingPage/display-versions.txt')
    }

    doLast {
        if(null == versionsFile.readLines().find { it == version }) {
            throw new GradleException("Current version ${version} is not listed. " +
                "Please correct ${versionsFile} before installing.")
        }
    }
}

task generateDocVersionsTable( type : Copy ) {

    ext {
        targetDir = file("${buildDir}/generated-docs")
    }

    group "Documentation"
    description 'Generates Asciidoc content for landing page'
    mustRunAfter validateDocVersions

    from 'src/docs/landingPage', {
        include 'display-versions.txt'
        rename ~/(.+)\.txt/,'$1.adoc'
        filter { String line ->
            if(line.startsWith('//') || line.startsWith('#')) {
                return null
            }
            final String docsLink = "link:${line}/docs/product-documentation.html[Docs]"
            final String apiLink  = "link:${line}/api/index.html[Groovydoc]"
            final String clogLink = "link:${line}/docs/changelog.html[Changelog]"
            return "a|*${line}*|${docsLink}|${apiLink}|${clogLink}"
        }
    }

    into targetDir
}

task landingPage( type : AsciidoctorTask ) {

	dependsOn generateDocVersionsTable
	mustRunAfter validateDocVersions

	inputs.dir generateDocVersionsTable.targetDir
	sourceDir 'src/docs/landingPage'
	outputDir "${buildDir}/docs/landingPage"
	separateOutputDirs = false

	sources {
		include 'index.adoc'
	}

	resources {
		from 'stylesheets'
		from 'images'
	}

	attributes gendocdir : file("${generateDocVersionsTable.targetDir}").absolutePath,
        includetopdir : projectDir.absolutePath,
		revnumber : "${version}"
}


asciidoctor {
	group "Documentation"
	description 'Generates the main product documentation & changelog'
	mustRunAfter validateDocVersions
	outputDir "${buildDir}/docs/plugin"
	separateOutputDirs = false
    inputs.files sourceSets.main.allSource
    inputs.files sourceSets.test.allSource

	sources {
		include 'product-documentation.adoc'
		include 'changelog.adoc'
	}

	attributes revnumber: "${version}",
		topdir : projectDir.absolutePath,
		compatdir : file('compatibility').absolutePath,
        'gradle-javadoc' : "https://docs.gradle.org/${gradle.gradleVersion}/javadoc",
        'gradle-dsl' : "https://docs.gradle.org/${gradle.gradleVersion}/dsl"
}

task installDocs( type : Copy ) {

    dependsOn validateDocVersions, asciidoctor, landingPage, groovydoc, gitPublishReset

    from landingPage.outputDir
    into websitePublishFolder

    with copySpec {
        from asciidoctor.outputDir
        into "${version}/docs"
    }

    with copySpec {
        from groovydoc
        into "${version}/api"
    }

    onlyIf notSnapshot
}


task updateGitLabYmlInPages( type : Copy ) {
    description 'Copies current GitLab CI configuration to pages branch'
    from project.projectDir, {
        include '.gitlab*'
    }
    into websitePublishFolder.parentFile
}

check {
	dependsOn validateDocVersions
}

publishPlugins {
	onlyIf notSnapshot
}

// *IMPORTANT* If you update this list also update .travis.yml & appveyor.yml
gradleTest {
	systemProperties = [:]
	// tag::compatibility-matrix[]
	versions '4.3', '4.8.1', '5.6.2'
	// end::compatibility-matrix[]

	beforeTest {
		println "  ${it.name}"
	}
}

appveyor {
	gradleTest {
		if (JavaVersion.current().isJava7()) {
			jvmArgs '-XX:+CMSClassUnloadingEnabled', '-XX:+CMSPermGenSweepingEnabled',
				'-XX:+UseConcMarkSweepGC'
		}

		maxParallelForks = 2
		minHeapSize = "256m"
		maxHeapSize = "768m"
	}
}

travisci {
	gradleTest {
		maxParallelForks = 2
		minHeapSize = "256m"
		maxHeapSize = "768m"
	}
}

gitPublish {

    repoUri = 'https://gitlab.com/ysb33rOrg/gradle-runner-plugin.git'
    branch = 'pages'
    repoDir = websitePublishFolder.parentFile

    preserve {
        file('src/docs/landingPage/display-versions.txt').readLines().each { line ->
            if (!line.startsWith('#')) {
                include "${websitePublishFolder.name}/${line}/**"
            }
        }
    }

    commitMessage = "Publishing documentation for v${version}"
}

gitPublishCommit {
    dependsOn installDocs, updateGitLabYmlInPages
}


task release {
    group "Release"
    description "Lifecycle task for releasing a new version"
	onlyIf notSnapshot
    dependsOn build, publishPlugins, uploadArchives, installDocs
}
