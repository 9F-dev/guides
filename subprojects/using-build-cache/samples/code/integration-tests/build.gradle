plugins {
    id('java')
}

task integTest(type: Test) {
}

// tag::integTest[]
integTest {
    inputs.property("operatingSystem") {
        System.getProperty("os.name")
    }
}
// end::integTest[]

// tag::distributionPathInput[]
// Don't do this! Breaks relocatability!
integTest {
    systemProperty "distribution.location", file("build/dist").absolutePath
}
// end::distributionPathInput[]

// tag::distributionDirInput[]
class DistributionLocationProvider implements CommandLineArgumentProvider { // <1>
    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)                                // <2>
    File distribution

    @Override
    Iterable<String> asArguments() {
        ["-Ddistribution.location=${distribution.absolutePath}".toString()] // <3>
    }
}

integTest {
    jvmArgumentProviders.add(
        new DistributionLocationProvider(distribution: file("build/dist"))  // <4>
    )
}
// end::distributionDirInput[]

// tag::ignoreSystemProperties[]
class CiEnvironmentProvider implements CommandLineArgumentProvider {
    @Internal                                                        // <1>
    String agentNumber = System.getenv().get("AGENT_NUMBER") ?: "1"

    @Override
    Iterable<String> asArguments() {
        ["-DagentNumber=${agentNumber}".toString()]                  // <2>
    }
}

integTest {
    jvmArgumentProviders.add(
        new CiEnvironmentProvider()                                  // <3>
    )
}
// end::ignoreSystemProperties[]

// tag::environment[]
integTest {
    inputs.property("langEnvironment") {
        System.getenv("LANG")
    }
}
// end::environment[]
